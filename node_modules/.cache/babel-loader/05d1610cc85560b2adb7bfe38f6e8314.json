{"ast":null,"code":"import _slicedToArray from \"/home/opah/Transfer\\xEAncias/JavascriptNotesClient-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/opah/Transfer\\xEAncias/JavascriptNotesClient-master/src/components/users/user_edit_password_form/index.js\";\nimport React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Title, Help, Label } from \"rbx\";\nimport UsersService from '../../../services/users';\n\nfunction UsersEditFormPassword() {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        password = _useState2[0],\n        setPassword = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password_confirmation = _useState4[0],\n        setPasswordConfirmation = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        status = _useState6[0],\n        setStatus = _useState6[1];\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n\n    if (password == password_confirmation) {\n      try {\n        await UsersService.updatePassword({\n          password: password\n        });\n        setStatus(\"success\");\n      } catch (err) {\n        setStatus(\"error\");\n      }\n    } else {\n      setStatus(\"error_confirmation_password\");\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Control, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Label, {\n    className: \"has-text-grey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Password\"), React.createElement(Input, {\n    type: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }))), React.createElement(Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Control, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Label, {\n    className: \"has-text-grey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Password Confirmation\"), React.createElement(Input, {\n    type: \"password\",\n    value: password_confirmation,\n    onChange: e => setPasswordConfirmation(e.target.value),\n    required: true,\n    name: \"password_confirmation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))), React.createElement(Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Control, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Column.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Column, {\n    className: \"has-text-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"custom-purple\",\n    outlined: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Update Password\"))))), status == \"error_update\" && React.createElement(Help, {\n    color: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Problem in password update\"), status == \"error_confirmation_password\" && React.createElement(Help, {\n    color: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Password don't match\"), status == \"success\" && React.createElement(Help, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Updated with success\")));\n}\n\nexport default UsersEditFormPassword;","map":{"version":3,"sources":["/home/opah/TransferÃªncias/JavascriptNotesClient-master/src/components/users/user_edit_password_form/index.js"],"names":["React","Fragment","useState","Button","Field","Control","Input","Column","Title","Help","Label","UsersService","UsersEditFormPassword","password","setPassword","password_confirmation","setPasswordConfirmation","status","setStatus","handleSubmit","evt","preventDefault","updatePassword","err","e","target","value"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Title, Help, Label } from \"rbx\";\nimport UsersService from '../../../services/users';\n\nfunction UsersEditFormPassword() {\n  const [password, setPassword] = useState(\"\");\n  const [password_confirmation, setPasswordConfirmation] = useState(\"\");\n  const [status, setStatus] = useState(null);\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    if(password == password_confirmation){\n      try {\n        await UsersService.updatePassword({ password: password });\n        setStatus(\"success\")\n      } catch (err) {\n        setStatus(\"error\")\n      }\n    } else{\n      setStatus(\"error_confirmation_password\")\n    }\n\n  }\n\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Password</Label>\n            <Input\n              type=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n              required\n              name=\"password\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Password Confirmation</Label>\n            <Input\n              type=\"password\"\n              value={password_confirmation}\n              onChange={e => setPasswordConfirmation(e.target.value)}\n              required\n              name=\"password_confirmation\"\n            />\n          </Control>\n        </Field>\n\n        <Field>\n          <Control>\n            <Column.Group>\n              <Column className=\"has-text-right\">\n                <Button color=\"custom-purple\" outlined>Update Password</Button>\n              </Column>\n            </Column.Group>\n          </Control>\n        </Field>\n        {status == \"error_update\" &&\n          <Help color=\"danger\">Problem in password update</Help>\n        }\n        {status == \"error_confirmation_password\" &&\n          <Help color=\"danger\">Password don't match</Help>\n        }\n        {status == \"success\" &&\n          <Help color=\"primary\">Updated with success</Help>\n        }\n      </form>\n    </Fragment>\n  )\n}\n\nexport default UsersEditFormPassword;"]},"metadata":{},"sourceType":"module"}